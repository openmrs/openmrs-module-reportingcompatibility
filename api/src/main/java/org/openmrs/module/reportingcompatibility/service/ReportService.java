/**
 * The contents of this file are subject to the OpenMRS Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://license.openmrs.org
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * Copyright (C) OpenMRS, LLC.  All Rights Reserved.
 */
package org.openmrs.module.reportingcompatibility.service;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.openmrs.Cohort;
import org.openmrs.Concept;
import org.openmrs.Drug;
import org.openmrs.DrugOrder;
import org.openmrs.Encounter;
import org.openmrs.EncounterType;
import org.openmrs.Form;
import org.openmrs.Location;
import org.openmrs.PatientIdentifierType;
import org.openmrs.PatientProgram;
import org.openmrs.PersonAttributeType;
import org.openmrs.Program;
import org.openmrs.ProgramWorkflowState;
import org.openmrs.Relationship;
import org.openmrs.RelationshipType;
import org.openmrs.annotation.Authorized;
import org.openmrs.api.APIException;
import org.openmrs.api.db.DAOException;
import org.openmrs.report.EvaluationContext;
import org.openmrs.report.RenderingMode;
import org.openmrs.report.ReportConstants;
import org.openmrs.report.ReportData;
import org.openmrs.report.ReportRenderer;
import org.openmrs.report.ReportSchema;
import org.openmrs.report.ReportSchemaXml;

/**
 * Contains methods pertaining to creating/updating/deleting/retiring/registering/evaluating
 * ReportSchema, ReportSchemaXml, ReportRenderer, ReportXmlMacros, and other 'Report' objects.<br/>
 */
public interface ReportService {
	
	/**
	 * This method evaluates a ReportSchema object for the given EvaluationContext and input Cohort.
	 * It returns the ReportData object which contains the Report "results".
	 * 
	 * @param reportSchema - The {@link ReportSchema} is the main report definition, and contains
	 *            all indicator and required parameter definitions
	 * @param inputCohort - If not null, this will limit the Report evaluation to only those
	 *            patients in this {@link Cohort}. If null, all patients are evaluated.
	 * @param context - The {@link EvaluationContext} which contains the parameters, provides
	 *            caching for the report evaluation
	 * @return {@link ReportData} - Contains the evaluated report data
	 * @throws org.openmrs.api.APIException
	 */
	@Authorized( { ReportConstants.PRIV_RUN_REPORTS })
	public ReportData evaluate(ReportSchema reportSchema, Cohort inputCohort, EvaluationContext context);
	
	/**
	 * Return a list of {@link ReportSchema}s
	 * 
	 * @return a List<ReportSchema> object containing all of the {@link ReportSchema}s
	 * @throws org.openmrs.api.APIException
	 */
	public List<ReportSchema> getReportSchemas() throws APIException;
	
	/**
	 * Get the {@link ReportSchema} with the given id
	 * 
	 * @param reportSchemaId The Integer ReportSchema id
	 * @return the matching {@link ReportSchema} object
	 * @throws APIException
	 */
	public ReportSchema getReportSchema(Integer reportSchemaId) throws APIException;
	
	/**
	 * Returns a ReportSchema object from a ReportSchemaXml definition De-serialized the xml
	 * definition, applies macro definitions, and returns an expanded report schema object
	 * 
	 * @param reportSchemaXml - the ReportSchemaXml to use to return a ReportSchema instance
	 * @return ReportSchema
	 * @throws Exception if conversion fails
	 */
	public ReportSchema getReportSchema(ReportSchemaXml reportSchemaXml) throws APIException;
	
	/**
	 * Save or update the given <code>ReportSchema</code> in the database. If this is a new
	 * ReportSchema, the returned ReportSchema will have a new
	 * {@link ReportSchema#getReportSchemaId()} inserted into it that was generated by the database
	 * 
	 * @param reportSchema The <code>ReportSchema</code> to save or update
	 * @throws APIException
	 */
	public void saveReportSchema(ReportSchema reportSchema) throws APIException;
	
	/**
	 * Deletes a <code>ReportSchema</code> from the database.
	 * 
	 * @param reportSchema The <code>ReportSchema</code> to remove from the system
	 * @throws APIException
	 */
	public void deleteReportSchema(ReportSchema reportSchema);
	
	/**
	 * Returns a Collection<ReportRenderer> of all registered ReportRenderers
	 * 
	 * @return All registered report renderers
	 */
	public Collection<ReportRenderer> getReportRenderers();
	
	/**
	 * Returns a List of {@link RenderingMode}s that the passed {@link ReportSchema} supports, in
	 * their preferred order
	 * 
	 * @return all rendering modes for the given schema, in their preferred order
	 */
	public List<RenderingMode> getRenderingModes(ReportSchema schema);
	
	/**
	 * Returns the registered {@link ReportRenderer} whose class matches the passed class
	 * 
	 * @param clazz The ReportRenderer implementation class to retrieve
	 * @return - The {@link ReportRenderer} that has been registered that matches the passed class
	 */
	public ReportRenderer getReportRenderer(Class<? extends ReportRenderer> clazz);
	
	/**
	 * Returns the registered {@link ReportRenderer} whose class matches the passed class name
	 * 
	 * @param className The String name of the ReportRenderer implementation class to retrieve
	 * @return The {@link ReportRenderer} that has been registered that matches the passed class
	 *         name
	 */
	public ReportRenderer getReportRenderer(String className);
	
	/**
	 * Add the given map to this service's renderers This map is set via spring, see the
	 * applicationContext-service.xml file
	 * 
	 * @param renderers Map of class to renderer object
	 */
	public void setRenderers(Map<Class<? extends ReportRenderer>, ReportRenderer> renderers) throws APIException;
	
	/**
	 * Gets the renderers map registered to this report service
	 * 
	 * @return Map of registered {@link org.openmrs.report.ReportRenderer}s
	 * @throws APIException
	 */
	public Map<Class<? extends ReportRenderer>, ReportRenderer> getRenderers() throws APIException;
	
	/**
	 * Registers the given renderer with the service
	 * 
	 * @param rendererClass
	 * @param renderer
	 * @throws APIException
	 */
	public void registerRenderer(Class<? extends ReportRenderer> rendererClass, ReportRenderer renderer) throws APIException;
	
	/**
	 * Convenience method for {@link #registerRenderer(Class, ReportRenderer)}
	 * 
	 * @param rendererClass
	 * @throws APIException
	 */
	public void registerRenderer(String rendererClass) throws APIException;
	
	/**
	 * Remove the renderer associated with <code>rendererClass</code> from the list of available
	 * renderers
	 * 
	 * @param rendererClass
	 */
	public void removeRenderer(Class<? extends ReportRenderer> rendererClass) throws APIException;
	
	/**
	 * Get the xmlified ReportSchema object that was saved previously
	 * 
	 * @return ReportSchemaXml object that is associated with the given id
	 */
	public ReportSchemaXml getReportSchemaXml(Integer reportSchemaXmlId);
	
	/**
	 * Insert or update the given ReportSchemaXml object in the database.
	 * 
	 * @param reportSchemaXml xml to save
	 * @since 1.5
	 */
	public void saveReportSchemaXml(ReportSchemaXml reportSchemaXml);
	
	/**
	 * Create a new ReportSchemaXml object in the database.
	 * 
	 * @param reportSchemaXml xml to save
	 * @deprecated use saveReportSchemaXml(reportSchemaXml)
	 */
	@Deprecated
	public void createReportSchemaXml(ReportSchemaXml reportSchemaXml);
	
	/**
	 * Update the given ReportSchemaXml object in the database.
	 * 
	 * @param reportSchemaXml xml to save
	 * @deprecated use saveReportSchemaXml(reportSchemaXml)
	 */
	@Deprecated
	public void updateReportSchemaXml(ReportSchemaXml reportSchemaXml);
	
	/**
	 * Delete the given ReportSchemaXml class from the db
	 */
	public void deleteReportSchemaXml(ReportSchemaXml reportSchemaXml);
	
	/**
	 * Get all saved ReportSchemaXml objects in the db
	 * 
	 * @return List of ReportSchemaXml objects
	 */
	public List<ReportSchemaXml> getReportSchemaXmls();
	
	/**
	 * Gets the macros that will be used when deserializing ReportSchemaXML
	 * 
	 * @return macros
	 */
	public Properties getReportXmlMacros();
	
	/**
	 * Saves the macros that will be used when deserializing ReportSchemaXML
	 * 
	 * @param macros the macros to set
	 */
	public void saveReportXmlMacros(Properties macros);
	
	/**
	 * Applies the report xml macros to the input, and returns it.
	 * 
	 * @param input The text (presumably a report schema xml definition) that you want to apply
	 *            macros to
	 * @return the result of applying macro substitutions to input
	 */
	public String applyReportXmlMacros(String input);
	
	public Cohort getAllPatients() throws DAOException;
	
	/**
	 * Returns a Cohort of patient who had drug orders for a set of drugs active on a certain date.
	 * Can also be used to find patient with no drug orders on that date.
	 * 
	 * @param patientIds Collection of patientIds you're interested in. NULL means all patients.
	 * @param takingIds Collection of drugIds the patient is taking. (Or the empty set to mean
	 *            "any drug" or NULL to mean "no drugs")
	 * @param onDate Which date to look at the patients' drug orders. (NULL defaults to now().)
	 */
	public Cohort getPatientsHavingDrugOrder(Collection<Integer> patientIds, Collection<Integer> takingIds, Date onDate);
	
	/**
	 * Returns a Cohort of patient who had drug orders for a set of drugs active between a pair of
	 * dates. Can also be used to find patient with no drug orders on that date.
	 * 
	 * @param patientIds Collection of patientIds you're interested in. NULL means all patients.
	 * @param drugIds Collection of drugIds the patient is taking. (Or the empty set to mean
	 *            "any drug" or NULL to mean "no drugs")
	 * @param groupMethod whether to do NONE, ALL, or ANY of the list of specified ids.
	 * @param fromDate Beginning of date range to look at (NULL defaults to toDate if that isn't
	 *            null, or now() if it is.)
	 * @param toDate End of date range to look at (NULL defaults to fromDate if that isn't null, or
	 *            now() if it is.)
	 * @return Cohort with matching Patients
	 * @should get all patients with drug orders given null parameters
	 * @should get patients with no drug orders
	 * @should get patients with drug orders for drugs
	 * @should get patients with no drug orders for drugs
	 * @should get patients with drug orders from date
	 * @should get patients with drug orders to date
	 * @should get patients with drug order for drug between dates
	 */
	public Cohort getPatientsHavingDrugOrder(Collection<Integer> patientIds, Collection<Integer> drugIds,
	        GroupMethod groupMethod, Date fromDate, Date toDate);
	
	/**
	 * @return A Cohort of patients who had drug order for particular drugs or generics, with start
	 *         dates within a range, with end dates within a range, and a reason for
	 *         discontinuation.
	 */
	public Cohort getPatientsHavingDrugOrder(List<Drug> drug, List<Concept> drugConcept, Date startDateFrom,
	        Date startDateTo, Date stopDateFrom, Date stopDateTo, Boolean discontinued, List<Concept> discontinuedReason);
	
	/**
	 * Equivalent to Cohort.subtract(PatientSetService.getAllPatients(), cohort) but may eventually
	 * perform faster by delegating to the database. (The current implementation has *not* been
	 * optimized.)
	 * 
	 * @param cohort
	 * @return inverse of the given cohort
	 * @since 1.8
	 */
	public Cohort getInverseOfCohort(Cohort cohort);
	
	/**
	 * Searches for patients who have encounters as described by the arguments to this method
	 * 
	 * @param encounterType
	 * @param location
	 * @param form
	 * @param fromDate
	 * @param toDate
	 * @param minCount
	 * @param maxCount
	 * @return all patients with encounters matching the arguments to this method
	 * @should get all patients with encounters when no parameters specified
	 */
	public Cohort getPatientsHavingEncounters(EncounterType encounterType, Location location, Form form, Date fromDate,
	        Date toDate, Integer minCount, Integer maxCount);
	
	/**
	 * Gets patients who have encounters as described by the parameters specified (all optional)
	 * 
	 * @param encounterTypeList
	 * @param location
	 * @param form
	 * @param fromDate
	 * @param toDate
	 * @param minCount
	 * @param maxCount
	 * @return Cohort with matching Patients
	 * @should get all patients with encounters when no parameters specified
	 * @should get patients with encounters of type
	 * @should get patients with encounters of multiple types
	 * @should get patients with encounters at location
	 * @should get patients with encounters from form
	 * @should get patients with encounters before date
	 * @should get patients with encounters after date
	 * @should get patients with encounters between dates
	 * @should get patients with at least n encounters
	 * @should get patients with at most n encounters
	 * @should get all patients with encounters when passed an empty encounterTypeList
	 */
	public Cohort getPatientsHavingEncounters(List<EncounterType> encounterTypeList, Location location, Form form,
	        Date fromDate, Date toDate, Integer minCount, Integer maxCount);
	
	public Cohort getPatientsHavingLocation(Location loc);
	
	public Cohort getPatientsHavingLocation(Location loc, PatientLocationMethod method);
	
	public Cohort getPatientsHavingLocation(Integer locationId);
	
	public Cohort getPatientsHavingLocation(Integer locationId, PatientLocationMethod method);
	
	/**
	 * Searches for patients who have observations as described by the arguments to this method
	 * 
	 * @param conceptId
	 * @param timeModifier
	 * @param modifier
	 * @param value
	 * @param fromDate
	 * @param toDate
	 * @return all patients with observations matching the arguments to this method
	 * @should get patients by concept and true boolean value
	 * @should get patients by concept and false boolean value
	 */
	public Cohort getPatientsHavingObs(Integer conceptId, TimeModifier timeModifier, Modifier modifier, Object value,
	        Date fromDate, Date toDate);
	
	public Cohort getPatientsByCharacteristics(String gender, Date minBirthdate, Date maxBirthdate) throws DAOException;
	
	/**
	 * Get patients by specified gender, birthdate range, age range, and alive status (all optional)
	 * 
	 * @param gender
	 * @param minBirthdate
	 * @param maxBirthdate
	 * @param minAge
	 * @param maxAge
	 * @param aliveOnly
	 * @param deadOnly
	 * @return Cohort with all matching patients
	 * @throws DAOException
	 * @should get all patients when no parameters given
	 * @should get patients of given gender
	 * @should get patients born before date
	 * @should get patients born after date
	 * @should get patients born between dates
	 * @should get patients who are alive
	 * @should get patients who are dead
	 */
	public Cohort getPatientsByCharacteristics(String gender, Date minBirthdate, Date maxBirthdate, Integer minAge,
	        Integer maxAge, Boolean aliveOnly, Boolean deadOnly) throws DAOException;
	
	public Cohort getPatientsByCharacteristics(String gender, Date minBirthdate, Date maxBirthdate, Date minDeathdate, Date maxDeathdate, Integer minAge,
	                                           Integer maxAge, Boolean aliveOnly, Boolean deadOnly) throws DAOException;
	
	/**
	 * Get patients by specified gender, birthdate range, age range, and alive status (all optional)
	 *
	 * @param gender
	 * @param minBirthdate
	 * @param maxBirthdate
	 * @param minAge
	 * @param maxAge
	 * @param aliveOnly
	 * @param deadOnly
	 * @param effectiveDate
	 * @return Cohort with all matching patients
	 * @throws DAOException
	 * @should get all patients when no parameters given
	 * @should get patients of given gender
	 * @should get patients born before date
	 * @should get patients born after date
	 * @should get patients born between dates
	 * @should get patients who are alive
	 * @should get patients who are dead
	 * @should not get patients born after effectiveDate
	 */
	public Cohort getPatientsByCharacteristics(String gender, Date minBirthdate, Date maxBirthdate, Integer minAge, Integer maxAge, Boolean aliveOnly, Boolean deadOnly, Date effectiveDate) throws DAOException;
	public Cohort getPatientsByCharacteristics(String gender, Date minBirthdate, Date maxBirthdate, Date minDeathdate, Date maxDeathdate, Integer minAge, Integer maxAge, Boolean aliveOnly, Boolean deadOnly, Date effectiveDate) throws DAOException;
	
	/**
	 * At least one of attribute and value must be non-null
	 * 
	 * @param attribute if not null, look for this attribute
	 * @param value if not null, look for this value
	 * @return Cohort of patients who have a person attribute (optionally) with attributeType of
	 *         attribute and (optionally) value of value.
	 */
	public Cohort getPatientsHavingPersonAttribute(PersonAttributeType attribute, String value);
	
	public Cohort getPatientsInProgram(Program program, Date fromDate, Date toDate);
	
	/**
	 * Gets patients who are enrolled in the given program or in the given state(s) at the specified
	 * time
	 * 
	 * @param program
	 * @param stateList
	 * @param fromDate
	 * @param toDate
	 * @return Cohort with matching Patients
	 * @should get all patients in any program given null parameters
	 * @should get patients in program
	 * @should get patients in program from date
	 * @should get patients in program to date
	 * @should get patients in program between dates
	 * @should get patients in state
	 * @should get patients in states
	 * @should get patients in state from date
	 * @should get patients in state to date
	 * @should get patients in state between dates
	 */
	public Cohort getPatientsByProgramAndState(Program program, List<ProgramWorkflowState> stateList, Date fromDate,
	        Date toDate);
	
	/**
	 * @return all active drug orders whose drug concept is in the given set (or all drugs if that's
	 *         null)
	 */
	public Map<Integer, List<DrugOrder>> getCurrentDrugOrders(Cohort ps, Concept drugSet);
	
	public Map<Integer, List<Relationship>> getRelationships(Cohort ps, RelationshipType relType);
	
	/**
	 * @return all active or finished drug orders whose drug concept is in the given set (or all
	 *         drugs if that's null)
	 * @should return an empty list if cohort is empty
	 */
	public Map<Integer, List<DrugOrder>> getDrugOrders(Cohort ps, Concept drugSet);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients Cohort of patients to search
	 * @param encType
	 * @return Map&lt;Integer, Encounter&gt; of patientId to first encounters of specified patients, from
	 *         a specific type
	 */
	public Map<Integer, Encounter> getFirstEncountersByType(Cohort patients, EncounterType encType);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients Cohort of patients to search
	 * @param types List&lt;EncounterType&gt; to include in the search
	 * @return Map&lt;Integer, Encounter&gt; of patientId to first encounters of specified patients, from
	 *         a specific list of types
	 */
	public Map<Integer, Encounter> getFirstEncountersByType(Cohort patients, List<EncounterType> types);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients Cohort of patients to search
	 * @param encTypes List&lt;EncounterType&gt; to include in the search
	 * @param attr
	 * @return Map&lt;Integer, Object&gt; of patientId to first encounters properties
	 */
	public Map<Integer, Object> getFirstEncounterAttrsByType(Cohort patients, List<EncounterType> encTypes, String attr);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients Cohort of patients to search
	 * @param encType the type of the encounter
	 * @return Map&lt;Integer, Encounter&gt; of patientId to encounters matching a specific type
	 */
	public Map<Integer, Encounter> getEncountersByType(Cohort patients, EncounterType encType);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients Cohort of patients to search
	 * @param encType List&lt;EncounterType&gt; to include in the search
	 * @return Map&lt;Integer, Encounter&gt; of patientId to encounters matching a specific type
	 */
	public Map<Integer, Encounter> getEncountersByType(Cohort patients, List<EncounterType> encType);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients Cohort of patients to search
	 * @param encTypes List&lt;EncounterType&gt; to include in the search
	 * @param attr <code>String</code> of attributes to get
	 * @return Map&lt;Integer, Object&gt; of encounter attributes
	 */
	public Map<Integer, Object> getEncounterAttrsByType(Cohort patients, List<EncounterType> encTypes, String attr);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients
	 * @param c
	 * @return Map&lt;patientId, List&lt;Obs values&gt;&gt;
	 */
	public Map<Integer, List<List<Object>>> getObservationsValues(Cohort patients, Concept c);
	
	/**
	 * Returns a mapping from patient id to obs for concept <code>c</code>
	 * <p>
	 * The returned List&lt; attribute value &gt; is [obs value, attr value, attr value, attr value...]
	 * The returned List&lt;List&lt; attribute value &gt;&gt; represents the obs rows
	 * 
	 * @param patients the cohort to restrict to. if null, then all patients are fetched
	 * @param c the concept to look for in obs.concept_id
	 * @param attributes list of attributes
	 * @param limit the number of patients to limit the results to. If null or less than zero,
	 *            return all
	 * @param showMostRecentFirst if true, obs with the highest obsDatetime will be first in the
	 *            List&lt;List&lt;Object&gt;&gt;
	 * @return <code>Map&lt;patientId, List&lt;List&lt; attribute value &gt;&gt;&gt;</code>
	 */
	public Map<Integer, List<List<Object>>> getObservationsValues(Cohort patients, Concept c, List<String> attributes,
	        Integer limit, boolean showMostRecentFirst);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients Cohort of patients to search
	 * @param className
	 * @param property
	 * @param returnAll
	 * @return Map&lt;Integer, Object&gt; of patientId to patient properties
	 */
	public Map<Integer, Object> getPatientAttributes(Cohort patients, String className, String property, boolean returnAll);
	
	/**
	 * TODO write something here
	 * 
	 * @param patients
	 * @param classNameDotProperty
	 * @param returnAll
	 * @return Map&lt;Integer, Object&gt; of patientId to patient properties
	 */
	public Map<Integer, Object> getPatientAttributes(Cohort patients, String classNameDotProperty, boolean returnAll);
	
	/**
	 * Gets a map of patient identifiers values by identifier type, indexed by patient primary key.
	 * 
	 * @param patients Cohort of patients to look up
	 * @param type PatientIdentifierType to retrieve
	 * @return Map of patient identifiers (strings) for all patients in the specified cohort
	 */
	public Map<Integer, String> getPatientIdentifierStringsByType(Cohort patients, PatientIdentifierType type);
	
	/**
	 * @should return person attributes of type Location
	 * @param patients
	 * @param attributeName
	 * @param joinClass
	 * @param joinProperty
	 * @param outputColumn
	 * @param returnAll
	 * @return Map&lt;Integer, Object&gt; of patientId to person properties
	 */
	public Map<Integer, Object> getPersonAttributes(Cohort patients, String attributeName, String joinClass,
	        String joinProperty, String outputColumn, boolean returnAll);
	
	/**
	 * Gets program enrollment data for the given cohort in the given program. The behavior is not
	 * specified if a patient is enrolled in the same program twice simultaneously.
	 * 
	 * @param ps the cohort to get data for
	 * @param program the program to look for enrollments in
	 * @return a Map from patientId to PatientProgram
	 * @should get program enrollments for the given cohort
	 */
	public Map<Integer, PatientProgram> getPatientPrograms(Cohort ps, Program program);
	
	public enum Modifier {
		LESS_THAN("<"),
		LESS_EQUAL("<="),
		EQUAL("="),
		GREATER_EQUAL(">="),
		GREATER_THAN(">");
		
		public final String sqlRep;
		
		Modifier(String sqlRep) {
			this.sqlRep = sqlRep;
		}
		
		public String getSqlRepresentation() {
			return sqlRep;
		}
	}
	
	public enum TimeModifier {
		ANY,
		NO,
		FIRST,
		LAST,
		MIN,
		MAX,
		AVG;
	}
	
	public enum BooleanOperator {
		AND,
		OR,
		NOT;
	}
	
	// probably should combine this with TimeModifier
	public enum GroupMethod {
		ANY,
		ALL,
		NONE;
	}
	
	public enum PatientLocationMethod {
		EARLIEST_ENCOUNTER,
		LATEST_ENCOUNTER,
		ANY_ENCOUNTER,
		PATIENT_HEALTH_CENTER
	}
}
